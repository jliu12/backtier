Users
~~~~~~~~~~
	REGISTER NEW USER: 
	-------------------
	Endpoint: [path]/users/create
		- Input: User table consists of fields:
			t.string :user_name
	    	t.string :user_real_name
	    	t.string :phone_number
	    	t.decimal :user_last_lat
	    	t.decimal :user_last_long
	    	t.datetime :user_last_time

		- Output on success: {status: 200, note: "OK", user_id: [id]}
		- Output on error: {status: 403, note: "Registration Error"}


	LOGIN:
	-------
	Endpoint: [path]/users/login
		- Input: :phone_number OR :user_name (whichever), and :password submission
				as usual in Rails
		- Output on success: {status: 200, note: "OK", user:{all user fields}}
			Ex. {"status":200,
				 "note":"OK",
				 "user":{
						"id":1,
						"user_name":"skipper",
						"phone_number":"6266075549",
						"user_last_long":"11.2",
						"user_last_lat":"10.5",
						"user_last_time":"2014-05-06T10:35:24.432Z",
						"events":[1,2]}}

				where "events" references a list of event_ids

		- Output on error: {status: 403, note: "Registration Error"}


	UPDATE USER LOCATION:
	---------------------
	Endpoint: [path]/users/update_location
		- Input: :id of user, :user_last_lat, :user_last_long (datetime is auto-filled)
		- Output on success: {status: 200, note: "Location update successful"}
		- Output on error: {status: 403, note: "Update failed"}


	UPDATE USER INFORMATION:
	------------------------
	Endpoint: [path]/users/update_info
		- Input: :id of user, and any/all of: :phone_number, :user_name
			-> If you want to update user location, please use /update_location
		- Output on success: {status: 200, note: "Update successful"}
		- Output on error: {status: 403, note: "Update failed"}


	CHECK IF USER EXISTS:
	----------------------
	Endpoint: [path]/users/is_user
		- Input: :phone_number OR :user_name (either/or)
		- Output: {is_user: true} or {is_user: false}


	GET INFO OF ONE USER:
	---------------------
	Endpoint: [path]/users/get_user
		- Input: :phone_number OR :user_name (either/or)
		- Output: {status: 200, note: "OK", user:{all user fields}}
			Ex. {"status":200,
				 "note":"OK",
				 "user":{
						"id":1,
						"user_name":"skipper",
						"phone_number":"6266075549",
						"user_last_long":"11.2",
						"user_last_lat":"10.5",
						"user_last_time":"2014-05-06T10:35:24.432Z",
						"events":[1,2]}}
		- Output if user does not exist: {status: 403, note: "User does not exist", is_user: false}

	GET CONTACTS LIST:
	-------------------
	Endpoint: [path]/users/get_contacts
		- Input: a list/array of phone numbers 
		- Output: {some number:{"is_user": true/false, "user_id": number }}
			Ex. {"6266075549": {"is_user":true,"user_id":1},
				 "6264515911": {"is_user":true,"user_id":2},
				 "6262036246": {"is_user":true,"user_id":3},
				 "6262154681": {"is_user":false}}

	GET USER EVENTS:
	------------------
	Endpoint: [path]/users/get_events
		- Input: user_id
		- Output: a hash of event objects, associated by event id
			Ex. {1:{"event_name": "TCS Night Market",
					"user_id": 1, <-- Host ID
					"location": "White Plaza",
					"latitude": 32.3,
					"longitude": 22.2,
					"start_time": 2014-05-08 09:15:00,
					"end_time": 2014-05-08 015:15:00,
					"users":[1,3,5],
					"messages":[5, 6, 7, 8]
					},
				 2: {"event_name": "Dinner with Mom",
					"user_id": 1,
					"location": "NOLAS",
					"latitude": 32.3,
					"longitude": 22.2,
					"start_time": 2014-05-08 09:15:00,
					"end_time": 2014-05-08 015:15:00,
					"users":[1,5],
					"messages":[1, 2, 3]
					},
				}


	GET PENDING USER INVITATIONS
	----------------------------
		Endpoint: [path]/users/get_invitations
		- Input: user_id
		- Output: a hash of event objects, associated by invitation_id
			Ex. {1:{'user_sent': 3,
					'user_received': 2
					'event_id': 5},
				 2:{'user_sent': 6,
					'user_received': 2
					'event_id': 2}
				 }


